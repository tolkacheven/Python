"""
Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()),
вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).Данные методы должны применяться только к
клеткам и выполнять увеличение, уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно.
В методе деления должно осуществляться округление значения до целого числа.
> Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
> Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше
  нуля, иначе выводить соответствующее сообщение;
> Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек
  этих двух клеток;
> Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
  ячеек этих двух клеток;

В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
Данный метод позволяет организовать ячейки по рядам. Метод должен возвращать строку вида *****\n*****\n*****...,
где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний
ряд записываются все оставшиеся. Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
Тогда метод make_order() вернет строку: *****\n*****\n**.
Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n*****.
"""
class Cell:
    def __init__(self, cells):
        self.__cells = cells

    @property
    def cells(self) -> int:
        return int(self.__cells)

    def set_cells(self, cells):
        self.__cells = cells

    # Сложение двух клеток. Результат - новый экземпляр класса, с количеством ячеей, равным сумме ячеей в каждой
    def __add__(self, another_cell):
        return Cell(self.cells + another_cell.cells)


    # Разность клеток. Результат - новая клетка, с кол-ом ячеек, равным разности
    def __sub__(self, another_cell):
        # raise Exception почему-то вызвал ошибку. Буду разбираться. Пока сделал через принт
        if self.cells <= another_cell.cells:
            print('Ошибка, в первой клетке меньше ячеек!')

        return Cell(self.cells - another_cell.cells)


    # Умножение клеток: в результате - одна клетка, с кол-ом ячеек, равным произведению ячеек двух клеток
    def __mul__(self, another_cell):
        self.set_cells(self.cells * another_cell.cells)
        return self

    # Деление клеток: Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление
    # количества ячеек этих двух клеток.
    def __truediv__(self, another_cell):
        self.set_cells(round(self.cells/another_cell.cells))
        return self


    def make_order(self, cells_in_line):
        result = '*' * self.cells
        return '\n'.join(result[i:i+cells_in_line] for i in range(0, len(result), cells_in_line))

first_cell = Cell(10)
second_cell = Cell(20)

first_cell *= second_cell
print(first_cell.make_order(5))

second_cell /= first_cell
print(first_cell.make_order(3))

third_cell = first_cell + second_cell
fourth_cell = third_cell - first_cell


print(third_cell.make_order(7))
print(fourth_cell.make_order(2))